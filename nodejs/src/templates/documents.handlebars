//

{{#each operations }}

#region {{ toBetterPascalCase name }} 

namespace Generated.{{ toBetterPascalCase name }} 
{

    {{ toCsharpComment "Operation Type" }}
    public partial class {{ toBetterPascalCase operationType }} : QueryBase<Data>
    { 
        private const string _query = @"{{asQueryUnescapedText document}}";

        public {{ toBetterPascalCase operationType }}({{{asArgumentList variables}}}) : base(resultProcessor)
        {
      {{#each variables}}
            {{ toBetterPascalCase name }} = {{ name }};
      {{/each}}
        }
        
        {{#each variables}}       
        public {{{ convertedType this false }}} {{ toBetterPascalCase name }} { get; }
        {{/each}}
        protected override string QueryText => _query;

        protected override Dictionary<string, object> Variables => new Dictionary<string, object>
        {
{{#each variables}}            { "{{ name }}", {{ toBetterPascalCase name }}{{{ converterIfNeeded this }}} },
{{/each}}
        };        
    }

    public sealed class Data
    {
      {{#if hasFields}}    
        {{> selectionSet fields }}
      {{/if}}  
    }

    {{#each innerModels }}   
    {{ toCsharpComment "Inner Model" }} 
    public sealed class {{ getInnerModelName this }}: I{{ toBetterPascalCase schemaBaseType }}
    {
        {{#if hasFields}}     
        {{> selectionSet fields }}
        {{/if}}

        {{#each fields}}      
        Option<{{{ convertedType this false }}}> I{{ toBetterPascalCase ../schemaBaseType }}.{{toBetterPascalCase name }} => Option.Some({{toBetterPascalCase name }});
        {{/each}}
    }
    {{/each}}
}

#endregion

{{/each}}